registers
8 registers
r0 == zero
condition reg NZCV

arch registers (only visible to specific instructions):
lr  (special reg 0)
sp  (special reg 1)
pc  (special reg 2)
cr  (special reg 3)
special reg 4-7 unused

ops:
00000 - mov :      d = a + b (no cc writeback)
00001 - add : NZCV d = a + b
00010 - adc : NZCV d = a + b + carry
00011 - sub : NZCV d = a - b
00100 - sbc : NZCV d = a - b - carry
00101 - and : NZ   d = a & b
00110 - or  : NZ   d = a | b
00111 - xor : NZ   d = a ^ b
01000 - lsl : NZ   d = a << b
01001 - lsr : NZ   d = a >> b
01010 - asr : NZ   d = (signed)a >> b
01011 - ror : NZ   d = rotate(a, b)

01100 - ldr : d = memory(a + b)
01101 - str : memory(a + b) = d

01110 - pop  : pop a list of regs from stack, ascending
01111 - push : push a list of regs on stack, descending

10xxx - branch

11xxx - unused

alu ops:
11111 100 000 00000
54321 098 765 43210
-------------------
OOOOO DDD AAA bbbbb

    b addressing mode:
              0XXXX - immediate (4 bit signed (except for shifts))
              10BBB - register direct
              11ida - special switches that affect a and d and b
                i bit:
                    b is stored in next word (otherwise b is immediate 0)
                d bit:
                    is D reg normal or special
                a bit:
                    is A reg normal or special

load/store ops:
    use the same addressing modes as the alu ops

    ldr/str reg, [reg + reg]
    ldr/str reg, [reg + imm]

push/pull ops:
11111 10000000000
54321 09876543210
-----------------
OOOOO PLSCrrrrrrr

push <reglist>
pop  <reglist>

    register are push/pulled in order, low to high:
        r1, r2, r3, r4, r5, r6, r7, cr, sp, lr, pc

branch ops:
11 1111 0000000000
54 3210 9876543210
------------------
    short conditional branch:
10 CCCC oooooooooo  - b  - conditional branch (unconditional is 1111)

         10 bit signed offset (-512/511)

    long unconditional branch (with link), uses nv conditional:
10 1111 Lxxxxx0rrr   - b(l) reg
10 1111 Lxxxxx0000   - b(l) #16bit signed offset (next instruction word)
10 1111 Lxxxxx1RRR   - b(l) special reg (only lr makes sense here)

        L moves next instruction into lr register

unused:
11 11110000000000
54 32109876543210
-----------------
11 xxxxxxxxxxxxxx

pseudo instructions:
    neg d, b    - sub d, r0, b
    not d, a    - xor d, a, #-1
    neg d       - sub d, r0, d
    not d       - sub d, r0, d
    teq a, b    - xor r0, a, b
    tst a, b    - and r0, a, b
    cmp a, b    - sub r0, a, b
    cmn a, b    - add r0, a, b

conditions (ARM style):
0000 eq          Equal.                                                      Z==1
0001 ne          Not equal.                                                  Z==0
0010 cs or hs    Unsigned higher or same (or carry set).                     C==1
0011 cc or lo    Unsigned lower (or carry clear).                            C==0
0100 mi          Negative. The mnemonic stands for "minus".                  N==1
0101 pl          Positive or zero. The mnemonic stands for "plus".           N==0
0110 vs          Signed overflow. The mnemonic stands for "V set".           V==1
0111 vc          No signed overflow. The mnemonic stands for "V clear".      V==0
1000 hi          Unsigned higher.                                            (C==1) && (Z==0)
1001 ls          Unsigned lower or same.                                     (C==0) || (Z==1)
1010 ge          Signed greater than or equal.                               N==V
1011 lt          Signed less than.                                           N!=V
1100 gt          Signed greater than.                                        (Z==0) && (N==V)
1101 le          Signed less than or equal.                                  (Z==1) || (N!=V)
1110 al (or omitted) Always executed.
1111 nv          never                                                       (use to signal long form)
